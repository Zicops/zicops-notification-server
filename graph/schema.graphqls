input NotificationInput {
  title: String!
  body: String!
  user_id: [String]!
}

type Notification {
  statuscode: String!
  error: String
  user_id: String
}

type FirestoreMessage {
  title: String!
  body: String!
  created_at: Int!
  user_id: String!
  message_id: String!
  is_read: Boolean!
  link: String!
  lsp_id: String!
}

type FirestoreData {
  title: String!
  body: String!
  created_at: Int!
  user_id: String!
  is_read: Boolean!
  message_id: String!
  link: String
  lsp_id: String!
}

input FirestoreDataInput {
  title: String!
  body: String!
  is_read: Boolean!
  message_id: String!
}

type PaginatedNotifications {
  messages: [FirestoreMessage]!
  nextPageSnapShot: String
}

type TagsData {
  user_lsp_id: String
  user_id: String
  tags: [String]
}

type Mutation {
  sendNotificationWithLink(notification: NotificationInput!, link: String!): [Notification]!
  addToFirestore(message: [FirestoreDataInput]!):String!
  sendEmail(to_: [String]!, sender_name:String!, user_name:[String], body: String!, template_id: String!): [String!]
  getFCMToken: String!
  Auth_tokens: String!
  sendEmail_UserId(user_id: [String]!, sender_name:String!, user_name:[String], body: String!, template_id: String!): [String!]
  addUserTags(user_lsp_id: String, user_id: String, tags:[String]): Boolean
}

type Query {
  getAll(prevPageSnapShot: String!, pageSize: Int!, is_read: Boolean): PaginatedNotifications
  getAllPaginatedNotifications(pageIndex: Int!, pageSize: Int!, is_read: Boolean): [FirestoreMessage]
  getUserLspIdTags(user_lsp_id: [String]): [TagsData]
  getTagUsers(tags:[String]): [TagsData]
}