# Deploy to Staging

name: Concurrent-Deployment
run-name: Deployment-${{ github.event.inputs.environment }}

# setting concurrency at workflow level
concurrency: ${{ github.event.inputs.environment }}

# trigger event
on: 
 workflow_dispatch:
  inputs:
      environment:
       description: 'Environment'
       type: environment
       required: true

      
env:
  # Setting an environment variable with the value of approvers
  prod_approvers: ${{ vars.PRODUCTION_APPROVERS }}
  staging_approvers: ${{ vars.STAGING_APPROVERS }}
  PROJECT_ID: ${{ secrets.GKE_PROJECT }}
  GKE_ZONE: asia-south1-a
  SERVICE_NAME: zicops-notification-server
  

# Deploy  jobs

jobs:
#Initialize variables based on trigger branch (staging or main)
  Initialize:
    runs-on: ubuntu-latest
    environment: ${{ github.event.inputs.environment }}
    env:
     BRANCH: test
    outputs:
      GKE_CLUSTER: ${{ steps.setvars.outputs.GKE_CLUSTER }}${{ steps.setvars_staging.outputs.GKE_CLUSTER }}
      NAMESPACE: ${{ steps.setvars.outputs.NAMESPACE }}${{ steps.setvars_staging.outputs.NAMESPACE }}
      APPROVERS: ${{ steps.setvars.outputs.appr }}${{ steps.setvars_staging.outputs.appr }}
      run_rest_jobs: ${{ steps.set_output.outputs.run_jobs }}${{ steps.set_output1.outputs.run_jobs }}
      
    steps:
     - name: Initializing variables
       run: echo "Initializing variables..."
       
     - name: Extract Branch Name
       run: |
        echo "Approvers      $prod_approvers  $staging_approvers"
        echo "BRANCH= ${GITHUB_REF##*/}" >> $GITHUB_ENV
        echo ${{env.BRANCH}}
       
      
       

     - name: Set variables_production
       if: ${{github.ref == 'refs/heads/main'}}   
       id: setvars
       run: |
        echo "GKE_CLUSTER=zicops-dot-com-1" >> $GITHUB_OUTPUT
        echo "NAMESPACE=production" >> $GITHUB_OUTPUT
        echo "appr=${{env.prod_approvers}}" >> $GITHUB_OUTPUT
       
   
        
     - name: Set variables_staging
       if: ${{github.ref == 'refs/heads/staging'}}  
       id: setvars_staging
       run: |
        echo "GKE_CLUSTER=zicops-production-cost-one" >> $GITHUB_OUTPUT
        echo "NAMESPACE=staging" >> $GITHUB_OUTPUT
        echo "appr=${{env.staging_approvers}}" >> $GITHUB_OUTPUT
        
        
     - name: Check if branch is either staging or main
       id: set_output
       if: ${{ github.ref == 'refs/heads/main' || github.ref == 'refs/heads/staging' }}
       run: echo "run_jobs=true" >> $GITHUB_OUTPUT
         
     - name: Check if branch is other than stagingor main 
       id: set_output_1
       if: ${{ github.ref != 'refs/heads/main' && github.ref != 'refs/heads/staging' }}
       run: echo "run_jobs=false" >> $GITHUB_OUTPUT

# Get Approvals for Deployment
  Approvals:
    runs-on: ubuntu-latest
    needs: Initialize
    if: ${{ needs.Initialize.outputs.run_rest_jobs == 'true'}}
    steps:
      - name: Code Testing
        run: echo approvers ${{ needs.Initialize.outputs.APPROVERS }} rest jobs ${{ needs.Initialize.outputs.run_rest_jobs }}
         
         
      - name: Get Approvals
        uses: trstringer/manual-approval@v1
        with:
          secret: ${{ github.TOKEN }}
          approvers: ${{ needs.Initialize.outputs.APPROVERS }}
          minimum-approvals: 1
          issue-title: "Deploying to ${{ github.event.inputs.environment }}"
          exclude-workflow-initiator-as-approver: false
          
      
    #Build Docker Image
  Build:
     runs-on: ubuntu-latest
     needs: [Initialize,Approvals]
     if: ${{ needs.Initialize.outputs.run_rest_jobs == 'true'}}

     steps:
     - uses: actions/checkout@v2
     - name: Auth GCP service account
       uses: 'google-github-actions/auth@v0'
       with:
         credentials_json: ${{ secrets.GCR_DEVOPS_SERVICE_ACCOUNT_KEY }}
     - name: 'Set up Cloud SDK'
       uses: 'google-github-actions/setup-gcloud@v0'
     - name: 'Use gcloud CLI'
       run: 'gcloud info'
     - name: Build the Docker image
       run: |-
         docker build -t gcr.io/$PROJECT_ID/$SERVICE_NAME:${GITHUB_SHA} --build-arg GO_MODULES_TOKEN=${{secrets.GO_MODULES_TOKEN}} .
     - name: add latest tag
       run: |-
        docker tag gcr.io/$PROJECT_ID/$SERVICE_NAME:${GITHUB_SHA} gcr.io/$PROJECT_ID/$SERVICE_NAME:latest    
     - run: |
        gcloud auth configure-docker -q
     - run: |
        gcloud components install gke-gcloud-auth-plugin
          

      
  call-staging-deployment-workflow:
   needs: [Initialize,Approvals,Build]
   if: ${{ needs.Initialize.outputs.run_rest_jobs == 'true'}}
   uses: Zicops/zicops-user-manager/.github/workflows/Reusable-zicops-cicd-um.yml@main
   
   with:
    GKE_CLUSTER: ${{ needs.Initialize.outputs.GKE_CLUSTER }}
    GKE_ZONE: $GKE_ZONE
    NAMESPACE: ${{ needs.Initialize.outputs.NAMESPACE }}
    SERVICE_NAME: $SERVICE_NAME
   secrets:
    PROJECT_ID: $PROJECT_ID
